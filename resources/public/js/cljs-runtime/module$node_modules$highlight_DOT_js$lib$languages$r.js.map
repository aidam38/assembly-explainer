{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$r.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/highlight_DOT_js/lib/languages/r.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$r\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\nfunction stripOptionsFromArgs(args) {\n  const opts = args[args.length - 1];\n\n  if (typeof opts === 'object' && opts.constructor === Object) {\n    args.splice(args.length - 1, 1);\n    return opts;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const opts = stripOptionsFromArgs(args);\n  const joined = '(' +\n    (opts.capture ? \"\" : \"?:\") +\n    args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/*\nLanguage: R\nDescription: R is a free software environment for statistical computing and graphics.\nAuthor: Joe Cheng <joe@rstudio.org>\nContributors: Konrad Rudolph <konrad.rudolph@gmail.com>\nWebsite: https://www.r-project.org\nCategory: common,scientific\n*/\n\n/** @type LanguageFn */\nfunction r(hljs) {\n  // Identifiers in R cannot start with `_`, but they can start with `.` if it\n  // is not immediately followed by a digit.\n  // R also supports quoted identifiers, which are near-arbitrary sequences\n  // delimited by backticks (`\u2026`), which may contain escape sequences. These are\n  // handled in a separate mode. See `test/markup/r/names.txt` for examples.\n  // FIXME: Support Unicode identifiers.\n  const IDENT_RE = /(?:(?:[a-zA-Z]|\\.[._a-zA-Z])[._a-zA-Z0-9]*)|\\.(?!\\d)/;\n  const NUMBER_TYPES_RE = either(\n    // Special case: only hexadecimal binary powers can contain fractions\n    /0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/,\n    // Hexadecimal numbers without fraction and optional binary power\n    /0[xX][0-9a-fA-F]+(?:[pP][+-]?\\d+)?[Li]?/,\n    // Decimal numbers\n    /(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+)?[Li]?/\n  );\n  const OPERATORS_RE = /[=!<>:]=|\\|\\||&&|:::?|<-|<<-|->>|->|\\|>|[-+*\\/?!$&|:<=>@^~]|\\*\\*/;\n  const PUNCTUATION_RE = either(\n    /[()]/,\n    /[{}]/,\n    /\\[\\[/,\n    /[[\\]]/,\n    /\\\\/,\n    /,/\n  );\n\n  return {\n    name: 'R',\n\n    keywords: {\n      $pattern: IDENT_RE,\n      keyword:\n        'function if in break next repeat else for while',\n      literal:\n        'NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 ' +\n        'NA_character_|10 NA_complex_|10',\n      built_in:\n        // Builtin constants\n        'LETTERS letters month.abb month.name pi T F ' +\n        // Primitive functions\n        // These are all the functions in `base` that are implemented as a\n        // `.Primitive`, minus those functions that are also keywords.\n        'abs acos acosh all any anyNA Arg as.call as.character ' +\n        'as.complex as.double as.environment as.integer as.logical ' +\n        'as.null.default as.numeric as.raw asin asinh atan atanh attr ' +\n        'attributes baseenv browser c call ceiling class Conj cos cosh ' +\n        'cospi cummax cummin cumprod cumsum digamma dim dimnames ' +\n        'emptyenv exp expression floor forceAndCall gamma gc.time ' +\n        'globalenv Im interactive invisible is.array is.atomic is.call ' +\n        'is.character is.complex is.double is.environment is.expression ' +\n        'is.finite is.function is.infinite is.integer is.language ' +\n        'is.list is.logical is.matrix is.na is.name is.nan is.null ' +\n        'is.numeric is.object is.pairlist is.raw is.recursive is.single ' +\n        'is.symbol lazyLoadDBfetch length lgamma list log max min ' +\n        'missing Mod names nargs nzchar oldClass on.exit pos.to.env ' +\n        'proc.time prod quote range Re rep retracemem return round ' +\n        'seq_along seq_len seq.int sign signif sin sinh sinpi sqrt ' +\n        'standardGeneric substitute sum switch tan tanh tanpi tracemem ' +\n        'trigamma trunc unclass untracemem UseMethod xtfrm',\n    },\n\n    contains: [\n      // Roxygen comments\n      hljs.COMMENT(\n        /#'/,\n        /$/,\n        {\n          contains: [\n            {\n              // Handle `@examples` separately to cause all subsequent code\n              // until the next `@`-tag on its own line to be kept as-is,\n              // preventing highlighting. This code is example R code, so nested\n              // doctags shouldn\u2019t be treated as such. See\n              // `test/markup/r/roxygen.txt` for an example.\n              scope: 'doctag',\n              begin: '@examples',\n              starts: {\n                contains: [\n                  { begin: /\\n/ },\n                  {\n                    begin: /#'\\s*(?=@[a-zA-Z]+)/,\n                    endsParent: true,\n                  },\n                  {\n                    begin: /#'/,\n                    end: /$/,\n                    excludeBegin: true,\n                  }\n                ]\n              }\n            },\n            {\n              // Handle `@param` to highlight the parameter name following\n              // after.\n              scope: 'doctag',\n              begin: '@param',\n              end: /$/,\n              contains: [\n                {\n                  scope: 'variable',\n                  variants: [\n                    { begin: IDENT_RE },\n                    { begin: /`(?:\\\\.|[^`\\\\])+`/ }\n                  ],\n                  endsParent: true\n                }\n              ]\n            },\n            {\n              scope: 'doctag',\n              begin: /@[a-zA-Z]+/\n            },\n            {\n              scope: 'keyword',\n              begin: /\\\\[a-zA-Z]+/,\n            }\n          ]\n        }\n      ),\n\n      hljs.HASH_COMMENT_MODE,\n\n      {\n        scope: 'string',\n        contains: [hljs.BACKSLASH_ESCAPE],\n        variants: [\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]\"(-*)\\(/, end: /\\)(-*)\"/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]\"(-*)\\{/, end: /\\}(-*)\"/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]\"(-*)\\[/, end: /\\](-*)\"/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\\(/, end: /\\)(-*)'/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\\{/, end: /\\}(-*)'/ }),\n          hljs.END_SAME_AS_BEGIN({ begin: /[rR]'(-*)\\[/, end: /\\](-*)'/ }),\n          {begin: '\"', end: '\"', relevance: 0},\n          {begin: \"'\", end: \"'\", relevance: 0}\n        ],\n      },\n\n      // Matching numbers immediately following punctuation and operators is\n      // tricky since we need to look at the character ahead of a number to\n      // ensure the number is not part of an identifier, and we cannot use\n      // negative look-behind assertions. So instead we explicitly handle all\n      // possible combinations of (operator|punctuation), number.\n      // TODO: replace with negative look-behind when available\n      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*[pP][+-]?\\d+i?/ },\n      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\\d+)?[Li]?/ },\n      // { begin: /(?<![a-zA-Z0-9._])(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[Li]?/ }\n      {\n        relevance: 0,\n        variants: [\n          {\n            scope: {\n              1: 'operator',\n              2: 'number'\n            },\n            match: [\n              OPERATORS_RE,\n              NUMBER_TYPES_RE\n            ]\n          },\n          {\n            scope: {\n              1: 'operator',\n              2: 'number'\n            },\n            match: [\n              /%[^%]*%/,\n              NUMBER_TYPES_RE\n            ]\n          },\n          {\n            scope: {\n              1: 'punctuation',\n              2: 'number'\n            },\n            match: [\n              PUNCTUATION_RE,\n              NUMBER_TYPES_RE\n            ]\n          },\n          {\n            scope: { 2: 'number' },\n            match: [\n              /[^a-zA-Z0-9._]|^/, // not part of an identifier, or start of document\n              NUMBER_TYPES_RE\n            ]\n          }\n        ]\n      },\n\n      // Operators/punctuation when they're not directly followed by numbers\n      {\n        // Relevance boost for the most common assignment form.\n        scope: { 3: 'operator' },\n        match: [\n          IDENT_RE,\n          /\\s+/,\n          /<-/,\n          /\\s+/\n        ]\n      },\n\n      {\n        scope: 'operator',\n        relevance: 0,\n        variants: [\n          { match: OPERATORS_RE },\n          { match: /%[^%]*%/ }\n        ]\n      },\n\n      {\n        scope: 'punctuation',\n        relevance: 0,\n        match: PUNCTUATION_RE\n      },\n\n      {\n        // Escaped identifier\n        begin: '`',\n        end: '`',\n        contains: [\n          { begin: /\\\\./ }\n        ]\n      }\n    ]\n  };\n}\n\nmodule.exports = r;\n\n};"],
"names":["shadow$provide","global","require","module","exports","stripOptionsFromArgs","args","opts","length","constructor","Object","splice","either","capture","map","x","source","join","r","hljs","IDENT_RE","NUMBER_TYPES_RE","OPERATORS_RE","PUNCTUATION_RE","name","keywords","$pattern","keyword","literal","built_in","contains","COMMENT","scope","begin","starts","endsParent","end","excludeBegin","variants","HASH_COMMENT_MODE","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","relevance","match"]
}
