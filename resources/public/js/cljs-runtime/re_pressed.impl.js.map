{"version":3,"sources":["re_pressed/impl.cljs"],"mappings":"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","names":["re-pressed.impl/ns-root","re-pressed.impl/max-record","re-pressed.impl/modifier-keys","re-pressed.impl/->ns-keyword","event-type","re_pressed$impl$__GT_ns_keyword_$_ns_keyword","suffix","cljs.core.keyword","re-pressed.impl/is-key?","recent-key","key-map","cljs.core/every?","p__44579","vec__44580","cljs.core.nth","k","v","cljs.core._EQ_","cljs.core.get","re-pressed.impl/register-subs","ns-keyword","re_frame.core.reg_sub","db","_","cljs.core.get_in","re-pressed.impl/->set-key!","p__44583","p__44584","map__44585","cljs.core/--destructure-map","vec__44586","cljs.core.update_in","key-maps","keys","cljs.core.conj","or__4212__auto__","cljs.core.into","cljs.core/take-last","re-pressed.impl/->clear-keys!","p__44589","p__44590","map__44591","vec__44592","cljs.core/assoc-in","p__44595","vec__44596","re-pressed.impl/prevent-default-keys!","e","re-pressed.impl/register-events","re_frame.core.reg_event_fx","re-pressed.impl/register-effects","re-frame.core/reg-fx","p__44604","map__44605","goog.events/listen","js/document","cljs.core/deref","e-key","modifier-key?","tag-name","entering-input?","cljs.core/contains?","hit-key","always-listen-keys","re_frame.core.subscribe","always-listen?","p1__44599#","cljs.core/some","cljs.core/not","re-frame.core/dispatch-sync","vec__44606","recent-keys","event-keys","clear-keys","cljs.core/last","is-key-sequence?","cljs.core/true?","p1__44600#","p2__44601#","cljs.core.mapv","cljs.core.concat","cljs.core/reverse","cljs.core.repeat","check-events","cljs.core.doall","iter__4611__auto__","s__44610","cljs.core/LazySeq","temp__5754__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4609__auto__","size__4610__auto__","cljs.core/count","b__44612","cljs.core/chunk-buffer","i__44611","vec__44613","cljs.core/-nth","seq__44614","first__44615","cljs.core/first","cljs.core/next","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__44609","cljs.core/chunk-rest","vec__44616","seq__44617","first__44618","cljs.core/cons","cljs.core/rest","trigger-event","ks","triggered?","cljs.core/PersistentVector","triggered-event","event?","G__44619","p1__44602#","cljs.core.filter","cljs.core/second","clear?","prevent-default-keys","prevent-default?","p1__44603#","cljs.core/chunk-first"],"sourcesContent":["(ns re-pressed.impl\n  (:require\n   [re-frame.core :as rf]\n   [goog.events :as ev]\n   ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Vars\n\n(def ns-root \"re-pressed.core/\")\n\n(def max-record 25)\n\n(def modifier-keys #{16 ;; shift\n                     17 ;; ctrl\n                     18 ;; alt\n                     91 ;; windows (i.e. meta) ... TODO: apple key?\n                     })\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Util\n\n(defn ->ns-keyword [event-type]\n  (fn ns-keyword\n    ([]\n     (ns-keyword nil))\n    ([suffix]\n     (keyword\n      (str ns-root\n           event-type\n           suffix)))))\n\n\n(defn is-key?\n  [recent-key key-map]\n  (every? (fn [[k v]]\n            (= (get recent-key k)\n               v))\n          key-map))\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Subs\n\n(defn register-subs [event-type]\n  (let [ns-keyword (->ns-keyword event-type)]\n    (rf/reg-sub\n     (ns-keyword \"-keys\")\n     (fn [db _]\n       (get-in db [(ns-keyword) :keys])))\n\n    (rf/reg-sub\n     (ns-keyword \"-event-keys\")\n     (fn [db _]\n       (get-in db [(ns-keyword) :event-keys])))\n\n    (rf/reg-sub\n     (ns-keyword \"-clear-keys\")\n     (fn [db _]\n       (get-in db [(ns-keyword) :clear-keys])))\n\n    (rf/reg-sub\n     (ns-keyword \"-always-listen-keys\")\n     (fn [db _]\n       (get-in db [(ns-keyword) :always-listen-keys])))\n\n    (when (= \"keydown\" event-type)\n      (rf/reg-sub\n       (ns-keyword \"-prevent-default-keys\")\n       (fn [db _]\n         (get-in db [(ns-keyword) :prevent-default-keys]))))\n    ))\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Events\n\n(defn- ->set-key! [event-type]\n  (let [ns-keyword (->ns-keyword event-type)]\n    (fn set-key!\n      [{:keys [db]} [_ key-map]]\n      {:db (update-in db [(ns-keyword) :keys]\n                      (fn [key-maps]\n                        (let [keys (if key-map\n                                     (conj (or key-maps\n                                               [])\n                                           key-map)\n                                     key-maps)]\n                          keys\n                          (into []\n                                (take-last max-record keys)))))})))\n\n(defn- ->clear-keys! [event-type]\n  (let [ns-keyword (->ns-keyword event-type)]\n    (fn clear-keys!\n      [{:keys [db]} [_ key-map]]\n      {:db (assoc-in db [(ns-keyword)\n                         :keys] [])})))\n\n\n(defn prevent-default-keys!\n  [_ [_ e]]\n  (let [k (keyword\n           (str ns-root \"prevent-default\"))]\n    {k e}))\n\n\n(defn register-events [event-type]\n  (let [ns-keyword (->ns-keyword event-type)]\n\n    (rf/reg-event-fx  (ns-keyword \"-set-key\")\n                      (->set-key! event-type))\n\n    (rf/reg-event-fx (ns-keyword \"-clear-keys\")\n                     (->clear-keys! event-type))\n\n    (when (= \"keydown\" event-type)\n      (rf/reg-event-fx (ns-keyword \"-prevent-default-keys\")\n                       prevent-default-keys!))))\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Effects\n\n(defn register-effects [event-type]\n  (when (= \"keydown\" event-type)\n    (rf/reg-fx\n     (keyword\n      (str ns-root \"prevent-default\"))\n     (fn [e]\n       (.preventDefault e)))))\n\n\n(rf/reg-fx\n (keyword\n  (str ns-root \"keyboard-event\"))\n\n (fn [{:keys [event-type]}]\n   (register-subs event-type)\n   (register-events event-type)\n   (register-effects event-type)\n\n   (ev/listen\n      js/document\n      event-type\n      (fn [e]\n        (let [ns-keyword (->ns-keyword event-type)\n\n              e-key         (.-keyCode e)\n              modifier-key? (modifier-keys e-key)\n\n              ;; --\n              ;; thanks re-frame-10x for this snippet\n              tag-name        (.-tagName (.-target e))\n              entering-input? (contains?\n                               #{\"INPUT\"\n                                 \"SELECT\"\n                                 \"TEXTAREA\"} tag-name)\n              ;; --\n\n              hit-key {:altKey   (.-altKey e)\n                       :ctrlKey  (.-ctrlKey e)\n                       :metaKey  (.-metaKey e)\n                       :shiftKey (.-shiftKey e)\n                       :keyCode  (.-keyCode e)}\n\n              always-listen-keys @(rf/subscribe [(ns-keyword \"-always-listen-keys\")])\n              always-listen?     (some #(is-key? hit-key %) always-listen-keys)]\n\n          (when (or (and (not modifier-key?)\n                         (not entering-input?))\n                    always-listen?)\n            (rf/dispatch-sync [(ns-keyword \"-set-key\") hit-key])\n            (let [recent-keys @(rf/subscribe [(ns-keyword \"-keys\")])\n                  event-keys  @(rf/subscribe [(ns-keyword \"-event-keys\")])\n                  clear-keys  @(rf/subscribe [(ns-keyword \"-clear-keys\")])\n\n                  recent-key (last recent-keys)\n\n                  is-key-sequence? (fn [key-maps]\n                                     (every? true?\n                                             (mapv\n                                              #(is-key? %1 %2)\n                                              (concat (reverse recent-keys)\n                                                      (repeat max-record {}))\n                                              (reverse key-maps))))\n\n                  check-events (doall\n                                (for [[trigger-event\n                                       & ks] event-keys]\n                                  (let [triggered? (some is-key-sequence? ks)]\n                                    (vector trigger-event triggered?))))\n\n                  [triggered-event\n                   event?] (some->> check-events\n                                    (filter #(true? (second %)))\n                                    first)\n\n                  clear? (some is-key-sequence? clear-keys)]\n              (when (= \"keydown\" event-type)\n                (let [prevent-default-keys @(rf/subscribe [(ns-keyword \"-prevent-default-keys\")])\n                      prevent-default?     (some #(is-key? recent-key %) prevent-default-keys)]\n                  (when prevent-default?\n                    (rf/dispatch-sync [(ns-keyword \"-prevent-default-keys\")\n                                       e]))))\n\n              (cond\n                clear?\n                (rf/dispatch-sync [(ns-keyword \"-clear-keys\")])\n\n                (and event?)\n                (rf/dispatch-sync (conj triggered-event\n                                        e\n                                        recent-keys))\n\n                :else nil))))))))\n"]}