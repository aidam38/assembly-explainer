{"version":3,"sources":["roam_automations/utils.cljs"],"mappings":";AAGA,gDAAA,hDAAMA,wGAAwBC,GAAGC;AAAjC,AACE,YAAA,WAAAC,nBAAME;AAAN,AAAa,6EAAAF,tEAACG,kBAAQ,AAACC,qBAAW,AAACC,0BAAeP;;WAAlD,WAAAG,lBACMK;AADN,AACY,OAACC,eAAKL,MAAM,AAACM,4CAAIH,0BAAe,AAAA,sFAAAJ;;AAD5C,AAEE,OAACQ,cAAI,AAACC,+CAAOJ,KAAKP;;AAEtB,kCAAA,lCAAMY,4EAAUC,EAAEC;AAAlB,AACE,OAACC,+CAAO,AAACC,6CAAKH,EAAEC,GACR,AAACG,6CAAK,KAAA,JAAKJ,SAAGC;;AAExB,iDAAA,jDAAMI,0GAAoBC;AAA1B,AACE,OAAY,AAAaC,8BAAcD","names":["roam-automations.utils/filter-transformations","st","ts","p1__44992#","p1__44993#","regex","cljs.core/re-find","cljs.core/re-pattern","clojure.string/lower-case","pred","cljs.core/some","cljs.core.map","cljs.core/vec","cljs.core.filter","roam-automations.utils/drop-nth","n","v","cljs.core.concat","cljs.core.take","cljs.core.drop","roam-automations.utils/copy-to-clipboard!","s","js/navigator"],"sourcesContent":["(ns roam-automations.utils\n  [:require [clojure.string :as str]])\n\n(defn filter-transformations [st ts]\n  (let [regex #(re-find (re-pattern (str/lower-case st)) %)\n        pred #(some regex (map str/lower-case (:names %)))]\n    (vec (filter pred ts))))\n\n(defn drop-nth [n v]\n  (concat (take n v)\n          (drop (inc n) v)))\n\n(defn copy-to-clipboard! [s]\n  (.writeText (.-clipboard js/navigator) s))"]}